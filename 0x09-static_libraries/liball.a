!<arch>
0-isupper.c/    1562959655  1000  1000  100664  227       `
/**
*_isupper - function to check if a character is uppercase
*@c: character to check
*Return: 1 if is an uppercase, 0 otherwise
*/
int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

0-memset.c/     1562960021  1000  1000  100664  300       `
/**
*_memset - fills the first n bytes of the memory with the constant byte b
*@s: name of the pointer
*@b: character
*@n: number
*Return: Pointer to the resultant string s
*/
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int x;

	for (x = 0; x < n; x++)
	{
		s[x] = b;
	}
return (s);
}
100-atoi.c/     1562963748  1000  1000  100664  110       `
/**
*_atoi: empty
*@s: name of the pointer
*Return: always 0
*/
int _atoi(char *s)
{
	*s = *s;
	return (0);
}
1-isdigit.c/    1562959696  1000  1000  100664  239       `
/**
*_isdigit - function to check if is a digit from 0 to 9
*@c: character to check
*Return: 1 if it is a digit between 0 and 9, 0 otherwise
*/
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

1-memcpy.c/     1562960052  1000  1000  100664  340       `
/**
*_memcpy - that copies memory area
*@dest: name of the first pointer (destiny)
*@src: name of the second pointer (source)
*@n: bytes that will be copied
*Return: Pointer to the value of dest
*/
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int x;

	for (x = 0; x < n; x++)
	{
		dest[x] = src[x];
	}

return (dest);
}
2-strchr.c/     1562960082  1000  1000  100664  329       `
/**
*_strchr - function to write a function that locates a character in a string
*@s: name pointer
*@c: character to share
*Return: pointer to the resultant string s depending on the condition
*/
char *_strchr(char *s, char c)
{
	int x;

	for (x = 0; s[x] != '\0'; x++)
	{

		if (s[x] == c)
		return (s + x);
	}
return ('\0');
}

2-strlen.c/     1562959811  1000  1000  100664  217       `
#include <stdio.h>
/**
*_strlen - Return the lenght of a string
*@s: name of the pointer
*Return: lenght of the string
*/
int _strlen(char *s)
{
	int len = 0;

	while (*s != 0)
	{
		s++;
		len++;
	}

	return (len);
}

3-islower.c/    1562959325  1000  1000  100664  272       `
/**
* _islower - Function to check  if i have a lowercase character
* @c: character to check
* Return: 1 if c is a lowecase, 0 if c is an upercase
*/
int _islower(int c)
{
if (c >= 97 && c <= 122)
{
return (1);
}
else
if (c >= 65 && c <= 90)
{
return (0);
}
return (0);
}
3-puts.c/       1562959874  1000  1000  100664  217       `
#include "holberton.h"
/**
*_puts - to print an string
*@str: name of the pointer
*Return: always 0
*/
void _puts(char *str)
{
	int i;

	for  (i = 0; str[i] != '\0'; i++)
	{
		_putchar(str[i]);
	}
		_putchar('\n');
}

3-strcmp.c/     1562962408  1000  1000  100664  512       `
/**
*_strcmp - function to compare two strings lexicographically
*@s1: name of the pointer 1
*@s2: name of the pointer 2
*Return: integer with the value of compare depeding the case
*/
int _strcmp(char *s1, char *s2)
{
	int x;
	int compare;

	for (x = 0; s1[x] != '\0'; x++)
	{
		if (s1[x] != s2[x])
		{
			compare = (s1[x] - s2[x]);
			break;
		}

		else if (s1[x] == s2[x])
		{
			if (s1[x] != s2[x])
			{
				compare = (s1[x] - s2[x]);
				break;
			}
		}

	}

compare = (s1[x] - s2[x]);

return (compare);
}
3-strspn.c/     1562960148  1000  1000  100664  483       `
/**
*_strspn - function that gets the length of a prefix substring
*@s: name of the pointer
*@accept: name of the second pointer
*Return: the number of bytes in the initial segment of s
*/
unsigned int _strspn(char *s, char *accept)
{
	int x;
	int y;
	unsigned int k;

	k = 0;

	for (x = 0; s[x] != '\0'; x++)
	{
		for (y = 0; accept[y] != '\0'; y++)
		{
			if (accept[y] == s[x])
			{
				k = k + 1;
				break;
			}
			if (accept[y + 1] == '\0')
			return (k);
		}
	}
return (k);
}

4-isalpha.c/    1562959418  1000  1000  100664  300       `
/**
 *_isalpha - function to check if c is lower or either an upercase letter
 *@c: character to check
 *Return: 1 if c is a lower or either uppercase, 0 otherwise
 */
int _isalpha(int c)
{
if (c >= 65 && c <= 90)
{
return (1);
}
else if (c >= 97 && c <= 122)
{
return (1);
}
else
{
return (0);
}
}

4-strpbrk.c/    1562962461  1000  1000  100664  421       `
/**
*_strpbrk - function that searches a string for any of a set of bytes
*@s: name of the first pointer
*@accept: name of the second pointerÂ¨
*Return: string s from the position x or null if doesnt find any match
*/
char *_strpbrk(char *s, char *accept)
{
	int x;
	int y;

	for (x = 0; s[x] != '\0'; x++)
	{
		for (y = 0; accept[y] != '\0'; y++)
		{
			if (s[x] == accept[y])
			return (s + x);
		}
	}
return ('\0');
}

5-strstr.c/     1562960385  1000  1000  100664  548       `
#include <stdio.h>
/**
*_strstr - function that locates a substring
*@haystack: main C string to be scanned
*@needle: small string to be searched with-in haystack string.
*Return: pointer to the value of small string if it matchs, null if not.
*/
char *_strstr(char *haystack, char *needle)
{
	int i;
	int j;
	int k;

	for (i = 0; haystack[i] != '\0'; i++)
	{
		j = 0;
		k = i;

			while (needle[j] == haystack[i] && needle[j] != '\0')
			{
				i++;
				j++;
			}
			if (needle[j] == '\0')
			{
				return (haystack + k);
			}



	}
return (0);
}

6-abs.c/        1562959572  1000  1000  100664  257       `
/**
 *_abs - gives the absolute value of a number
 *Return: x if x is either positive or negative, 0 if x = 0
 *@n: value to check
 */
int _abs(int n)
{
int x;
if (n < 0)
{
x = n * (-1);
return (x);
}
else if (n == 0)
{
return (0);
}
else
{
return (n);
}
}

9-strcpy.c/     1562959916  1000  1000  100664  274       `
/**
*_strcpy - function to copy an string
*@dest: name of the pointer
*@src: name of the pointer
*Return: what is inside *dest
*/
char *_strcpy(char *dest, char *src)
{
	int x;

	for (x = 0; src[x] != '\0'; x++)
	{
		dest[x] = src[x];
	}
		dest[x] = '\0';

return (dest);
}
main.c/         1562962812  1000  1000  100664  153       `
#include "holberton.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}

_putchar.c/     1562960992  1000  1000  100664  73        `
#include <unistd.h>

int _putchar(char c)
{
	return (write(1, &c, 1));
}

